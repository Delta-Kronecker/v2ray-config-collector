name: V2Ray Config Collector and Tester

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  collect-and-test-configs:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install system dependencies
      run: |
        # Install system dependencies with retry logic
        for i in {1..3}; do
          if sudo apt-get update && sudo apt-get install -y wget unzip; then
            echo "System dependencies installed successfully"
            break
          else
            echo "System dependencies installation failed, attempt $i/3"
            if [ $i -lt 3 ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done

    - name: Setup Xray
      run: |
        # Setup Xray with retry logic
        for i in {1..3}; do
          if [ -f "xray_test/xray" ]; then
            echo "Using existing Xray binary from project"
            if sudo cp xray_test/xray /usr/local/bin/ && sudo chmod +x /usr/local/bin/xray && xray version; then
              echo "Xray setup completed successfully"
              break
            fi
          else
            echo "Downloading Xray binary, attempt $i/3"
            if wget -O xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip && unzip -o xray.zip && sudo mv xray /usr/local/bin/ && sudo chmod +x /usr/local/bin/xray && xray version; then
              echo "Xray setup completed successfully"
              break
            fi
          fi

          echo "Xray setup failed, attempt $i/3"
          if [ $i -lt 3 ]; then
            echo "Retrying in 15 seconds..."
            sleep 15
          fi
        done

    - name: Install Python dependencies
      run: |
        cd config_collector
        # Install any required Python packages with retry logic
        for i in {1..3}; do
          if pip install requests beautifulsoup4 lxml urllib3 tenacity; then
            echo "Python dependencies installed successfully"
            break
          else
            echo "Python dependencies installation failed, attempt $i/3"
            if [ $i -lt 3 ]; then
              echo "Retrying in 30 seconds..."
              sleep 30
            fi
          fi
        done

    - name: Install Go dependencies
      run: |
        cd xray_test
        # Install Go dependencies with retry logic
        for i in {1..3}; do
          if go mod tidy && go mod download; then
            echo "Go dependencies installed successfully"
            break
          else
            echo "Go dependencies installation failed, attempt $i/3"
            if [ $i -lt 3 ]; then
              echo "Retrying in 20 seconds..."
              sleep 20
            fi
          fi
        done

    - name: Create necessary directories
      run: |
        mkdir -p data/working_url
        mkdir -p data/working_json
        mkdir -p log

    - name: Run config collector
      run: |
        cd config_collector
        # Run config collector with retry logic
        for i in {1..3}; do
          if python main.py; then
            echo "Config collector completed successfully"
            break
          else
            echo "Config collector failed, attempt $i/3"
            if [ $i -lt 3 ]; then
              echo "Retrying in 60 seconds..."
              sleep 60
            fi
          fi
        done

    - name: Run proxy tester
      run: |
        cd xray_test
        # Run proxy tester with retry logic
        for i in {1..3}; do
          if go run proxy-tester.go; then
            echo "Proxy tester completed successfully"
            break
          else
            echo "Proxy tester failed, attempt $i/3"
            if [ $i -lt 3 ]; then
              echo "Retrying in 90 seconds..."
              sleep 90
            fi
          fi
        done

    - name: Run quality tester
      run: |
        cd xray_test
        # Run quality tester with retry logic
        for i in {1..3}; do
          if go run quality_tester.go; then
            echo "Quality tester completed successfully"
            break
          else
            echo "Quality tester failed, attempt $i/3"
            if [ $i -lt 3 ]; then
              echo "Retrying in 90 seconds..."
              sleep 90
            fi
          fi
        done

    - name: Check generated files
      run: |
        echo "=== Generated files in data/working_url ==="
        ls -la data/working_url/ || echo "No files in working_url directory"
        echo "=== Generated files in data/working_json ==="
        ls -la data/working_json/ || echo "No files in working_json directory"
        echo "=== Generated files in config_collector/deduplicated_urls ==="
        ls -la config_collector/deduplicated_urls/ || echo "No files in deduplicated_urls directory"



    - name: Commit and push changes
      run: |
        # Configure git user
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

        # Add timestamp to commit message
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')

        # Stash any unstaged changes to avoid conflicts
        git stash --include-untracked || echo "No changes to stash"

        # Pull latest changes from remote first
        git pull origin main || echo "Pull failed or already up to date"

        # Pop stashed changes back
        git stash pop || echo "No stash to pop"

        # Stage all changes in data directory and deduplicated_urls
        git add data/
        git add config_collector/deduplicated_urls/

        # Check if there are any changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Commit the changes
          git commit -m "Auto-update proxy configs - $TIMESTAMP"

          # Push the changes with retry mechanism
          for i in {1..3}; do
            if git push; then
              echo "Changes committed and pushed successfully"
              break
            else
              echo "Push failed, attempt $i/3. Pulling latest changes..."
              git pull origin main
              if [ $i -lt 3 ]; then
                echo "Retrying push in 10 seconds..."
                sleep 10
              fi
            fi
          done
        fi

    - name: Upload artifacts (backup)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: proxy-configs-${{ github.run_number }}
        path: |
          data/working_url/
          data/working_json/
          config_collector/deduplicated_urls/
          log/
        retention-days: 7
